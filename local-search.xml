<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>11.25-Crypto-WP</title>
    <link href="/2023/11/25/11-25-Crypto-WP/"/>
    <url>/2023/11/25/11-25-Crypto-WP/</url>
    
    <content type="html"><![CDATA[<h1 id="2023-11-25-密码WP"><a href="#2023-11-25-密码WP" class="headerlink" title="2023-11-25  密码WP"></a>2023-11-25  密码WP</h1><h4 id="第一题-SWPUCTF-2021-新生赛-crypto8（Uuencode的特征）"><a href="#第一题-SWPUCTF-2021-新生赛-crypto8（Uuencode的特征）" class="headerlink" title="第一题-[SWPUCTF 2021 新生赛]crypto8（Uuencode的特征）"></a>第一题-[SWPUCTF 2021 新生赛]crypto8（Uuencode的特征）</h4><p>73E-30U1&amp;&gt;V-H965S95]I&lt;U]P;W&#x3D;E&lt;GT&#96;</p><p>开始以为是base85，试了老久发现不是。</p><p>看wp才发现Uuencode。</p><p>Uuencode的算法很简单，编码时它将3个字符顺序放入一个 24 位的缓冲区，缺字符的地方补零，然后将缓冲区截断成为 4 个部分，高位在先，每个部分 6 位，用下面的64个字符重新表示：</p><p>“&#96;!”#$%&amp;’()*+,-.&#x2F;0123456789:;&lt;&#x3D;&gt;?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[]^_”</p><p>解码时它将4个字符分别转换为4个6位字符后，截取有用的后六位放入一个 24 位的缓冲区，即得3个二进制代码。</p><h4 id="第二题-SWPUCTF-2021-新生赛-crypto7（MD5的特征）"><a href="#第二题-SWPUCTF-2021-新生赛-crypto7（MD5的特征）" class="headerlink" title="第二题-[SWPUCTF 2021 新生赛]crypto7（MD5的特征）"></a>第二题-[SWPUCTF 2021 新生赛]crypto7（MD5的特征）</h4><p>69f7906323b4f7d1e4e972acf4abfbfc</p><p>以为是16进制，看了wp，嘿MD5。</p><p>md5加密后是16位或者32位的字符，由字母和数字组成，字母大小写统一。</p><h4 id="第三题-SWPUCTF-2021-新生赛-ez-rsa（简单rsa，知道p，q，e求d）"><a href="#第三题-SWPUCTF-2021-新生赛-ez-rsa（简单rsa，知道p，q，e求d）" class="headerlink" title="第三题-[SWPUCTF 2021 新生赛]ez_rsa（简单rsa，知道p，q，e求d）"></a>第三题-[SWPUCTF 2021 新生赛]ez_rsa（简单rsa，知道p，q，e求d）</h4><p>p &#x3D; 1325465431<br>q &#x3D; 152317153<br>e &#x3D; 65537<br>计算出d,将d用MD5加密后包裹NSSCTF{}提交</p><p>我们知道这涉及了rsa加密，欧拉函数与乘法逆元（哼啊啊不会</p><ol><li><a href="https://oi-wiki.org/math/number-theory/euler/">欧拉函数（Euler’s totient function）</a></li><li><a href="https://oi-wiki.org/math/number-theory/inverse/">模意义下乘法运算的逆元（Modular Multiplicative Inverse）</a></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> md5</span><br><span class="line"></span><br><span class="line">p = <span class="number">1325465431</span></span><br><span class="line">q = <span class="number">152317153</span></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line"></span><br><span class="line">phi = (p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">d= gmpy2.invert(e,phi)</span><br><span class="line"></span><br><span class="line">flag = md5(<span class="built_in">str</span>(d).encode())</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;flag is : NSSCTF&#123;%s&#125;&quot;</span>%flag.hexdigest())</span><br></pre></td></tr></table></figure><h4 id="第四题-SWPUCTF-2021-新生赛-crypto2（共模攻击，有两个e）"><a href="#第四题-SWPUCTF-2021-新生赛-crypto2（共模攻击，有两个e）" class="headerlink" title="第四题-[SWPUCTF 2021 新生赛]crypto2（共模攻击，有两个e）"></a>第四题-[SWPUCTF 2021 新生赛]crypto2（共模攻击，有两个e）</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">flag  = <span class="string">&#x27;***************&#x27;</span></span><br><span class="line"></span><br><span class="line">p = getPrime(<span class="number">512</span>)</span><br><span class="line">q = getPrime(<span class="number">512</span>)</span><br><span class="line">m1 = bytes_to_long(<span class="built_in">bytes</span>(flag.encode()))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">n = p*q</span><br><span class="line">e1 = getPrime(<span class="number">32</span>)</span><br><span class="line">e2 = getPrime(<span class="number">32</span>)</span><br><span class="line"><span class="built_in">print</span>()</span><br><span class="line"></span><br><span class="line">flag1 = <span class="built_in">pow</span>(m1,e1,n)</span><br><span class="line">flag2 = <span class="built_in">pow</span>(m1,e2,n)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;flag1= &#x27;</span>+<span class="built_in">str</span>(flag1))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;flag2= &#x27;</span>+<span class="built_in">str</span>(flag2))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;e1= &#x27;</span> +<span class="built_in">str</span>(e1))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;e2= &#x27;</span>+<span class="built_in">str</span>(e2))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;n= &#x27;</span>+<span class="built_in">str</span>(n))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#flag1= 100156221476910922393504870369139942732039899485715044553913743347065883159136513788649486841774544271396690778274591792200052614669235485675534653358596366535073802301361391007325520975043321423979924560272762579823233787671688669418622502663507796640233829689484044539829008058686075845762979657345727814280</span></span><br><span class="line"><span class="comment">#flag2= 86203582128388484129915298832227259690596162850520078142152482846864345432564143608324463705492416009896246993950991615005717737886323630334871790740288140033046061512799892371429864110237909925611745163785768204802056985016447086450491884472899152778839120484475953828199840871689380584162839244393022471075</span></span><br><span class="line"><span class="comment">#e1= 3247473589</span></span><br><span class="line"><span class="comment">#e2= 3698409173</span></span><br><span class="line"><span class="comment">#n= 103606706829811720151309965777670519601112877713318435398103278099344725459597221064867089950867125892545997503531556048610968847926307322033117328614701432100084574953706259773711412853364463950703468142791390129671097834871371125741564434710151190962389213898270025272913761067078391308880995594218009110313</span></span><br></pre></td></tr></table></figure><p>解题如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> xenny.ctf.crypto.modern.asymmetric.rsa <span class="keyword">import</span> same_module</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">flag1= <span class="number">100156221476910922393504870369139942732039899485715044553913743347065883159136513788649486841774544271396690778274591792200052614669235485675534653358596366535073802301361391007325520975043321423979924560272762579823233787671688669418622502663507796640233829689484044539829008058686075845762979657345727814280</span></span><br><span class="line">flag2= <span class="number">86203582128388484129915298832227259690596162850520078142152482846864345432564143608324463705492416009896246993950991615005717737886323630334871790740288140033046061512799892371429864110237909925611745163785768204802056985016447086450491884472899152778839120484475953828199840871689380584162839244393022471075</span></span><br><span class="line">e1= <span class="number">3247473589</span></span><br><span class="line">e2= <span class="number">3698409173</span></span><br><span class="line">n= <span class="number">103606706829811720151309965777670519601112877713318435398103278099344725459597221064867089950867125892545997503531556048610968847926307322033117328614701432100084574953706259773711412853364463950703468142791390129671097834871371125741564434710151190962389213898270025272913761067078391308880995594218009110313</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">m = same_module.attack(n, e1, e2, flag1, flag2)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m))</span><br></pre></td></tr></table></figure><h4 id="第五题-羊城杯-2021-Bigrsa（共享素数，有两个n）"><a href="#第五题-羊城杯-2021-Bigrsa（共享素数，有两个n）" class="headerlink" title="第五题-[羊城杯 2021]Bigrsa（共享素数，有两个n）"></a>第五题-[羊城杯 2021]Bigrsa（共享素数，有两个n）</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> flag <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">n1 = <span class="number">103835296409081751860770535514746586815395898427260334325680313648369132661057840680823295512236948953370895568419721331170834557812541468309298819497267746892814583806423027167382825479157951365823085639078738847647634406841331307035593810712914545347201619004253602692127370265833092082543067153606828049061</span></span><br><span class="line">n2 = <span class="number">115383198584677147487556014336448310721853841168758012445634182814180314480501828927160071015197089456042472185850893847370481817325868824076245290735749717384769661698895000176441497242371873981353689607711146852891551491168528799814311992471449640014501858763495472267168224015665906627382490565507927272073</span></span><br><span class="line"></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line">c = <span class="built_in">pow</span>(m, e, n1)</span><br><span class="line">c = <span class="built_in">pow</span>(c, e, n2)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;c = %d&quot;</span> % c)</span><br><span class="line"></span><br><span class="line"><span class="comment"># output</span></span><br><span class="line"><span class="comment"># c = 60406168302768860804211220055708551816238816061772464557956985699400782163597251861675967909246187833328847989530950308053492202064477410641014045601986036822451416365957817685047102703301347664879870026582087365822433436251615243854347490600004857861059245403674349457345319269266645006969222744554974358264</span></span><br><span class="line"><span class="comment">#n2 = 115383198584677147487556014336448310721853841168758012445634182814180314480501828927160071015197089456042472185850893847370481817325868824076245290735749717384769661698895000176441497242371873981353689607711146852891551491168528799814311992471449640014501858763495472267168224015665906627382490565507927272073</span></span><br></pre></td></tr></table></figure><p>解题如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">n1 = <span class="number">103835296409081751860770535514746586815395898427260334325680313648369132661057840680823295512236948953370895568419721331170834557812541468309298819497267746892814583806423027167382825479157951365823085639078738847647634406841331307035593810712914545347201619004253602692127370265833092082543067153606828049061</span></span><br><span class="line">n2 = <span class="number">115383198584677147487556014336448310721853841168758012445634182814180314480501828927160071015197089456042472185850893847370481817325868824076245290735749717384769661698895000176441497242371873981353689607711146852891551491168528799814311992471449640014501858763495472267168224015665906627382490565507927272073</span></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">c = <span class="number">60406168302768860804211220055708551816238816061772464557956985699400782163597251861675967909246187833328847989530950308053492202064477410641014045601986036822451416365957817685047102703301347664879870026582087365822433436251615243854347490600004857861059245403674349457345319269266645006969222744554974358264</span></span><br><span class="line"></span><br><span class="line">q = GCD(n1,n2)</span><br><span class="line">p1 = n1 // q</span><br><span class="line">p2 = n2 // q</span><br><span class="line"></span><br><span class="line">d1 = inverse(e, (q-<span class="number">1</span>)*(p1-<span class="number">1</span>))</span><br><span class="line">d2 = inverse(e, (q-<span class="number">1</span>)*(p2-<span class="number">1</span>))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(<span class="built_in">pow</span>(<span class="built_in">pow</span>(c, d2, n2), d1, n1)))</span><br></pre></td></tr></table></figure><h4 id="第六题-AFCTF-2018-BASE（用代码解决多重base加密问题）"><a href="#第六题-AFCTF-2018-BASE（用代码解决多重base加密问题）" class="headerlink" title="第六题-[AFCTF 2018]BASE（用代码解决多重base加密问题）"></a>第六题-[AFCTF 2018]BASE（用代码解决多重base加密问题）</h4><p>[<a href="https://www.nssctf.cn/problem/932">AFCTF 2018]BASE | NSSCTF</a></p><p>题解如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;E:\cft_questions\\base\\flag_encode.txt&quot;</span>,<span class="string">&quot;r&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    data = f.read()</span><br><span class="line">    f.close()</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&quot;&#123;&quot;</span> <span class="keyword">in</span> <span class="built_in">str</span>(data):</span><br><span class="line">        <span class="built_in">print</span>(data)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        data = base64.b16decode(data)</span><br><span class="line">    <span class="keyword">except</span> Exception:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            data = base64.b32decode(data)</span><br><span class="line">        <span class="keyword">except</span> Exception:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                data = base64.b64decode(data)</span><br><span class="line">            <span class="keyword">except</span> Exception:</span><br><span class="line">                data = base64.b85decode(data)</span><br></pre></td></tr></table></figure><h3 id="总结：Crypto之路任重道远，不仅需要代码能力还需要数学方面的相关知识，嗯，学吧！"><a href="#总结：Crypto之路任重道远，不仅需要代码能力还需要数学方面的相关知识，嗯，学吧！" class="headerlink" title="总结：Crypto之路任重道远，不仅需要代码能力还需要数学方面的相关知识，嗯，学吧！"></a>总结：Crypto之路任重道远，不仅需要代码能力还需要数学方面的相关知识，嗯，学吧！</h3>]]></content>
    
    
    
    <tags>
      
      <tag>Crypto</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>“CTF方向”</title>
    <link href="/2023/11/11/%E2%80%9CCTF%E6%96%B9%E5%90%91%E2%80%9D/"/>
    <url>/2023/11/11/%E2%80%9CCTF%E6%96%B9%E5%90%91%E2%80%9D/</url>
    
    <content type="html"><![CDATA[<p>Crypto<br>CTF（Capture The Flag）是一种网络安全竞赛，其中参与者需要解决各种信息安全挑战，包括密码学。密码学在CTF中是一个广泛涉及的领域，涉及到许多不同类型的加密算法、攻击技术和挑战。</p><p>以下是密码学在CTF中可能涉及的一些主题和概念：</p><p>加密算法：</p><p>对称加密： 参赛者可能需要分析给定的加密算法，识别密钥和加密&#x2F;解密过程。流行的对称加密算法包括AES、DES、和RC4等。<br>非对称加密： 涉及到使用公钥和私钥进行加密和解密。常见的非对称加密算法包括RSA、ECC等。<br>哈希函数： 破解哈希函数，寻找碰撞，或者逆向计算哈希值，是CTF中常见的挑战。MD5、SHA-1、SHA-256等是常见的哈希函数。<br>常见攻击技术：</p><p>密码分析： 分析密码的性质，例如弱密码、常见密码，以及使用密码字典进行暴力破解。<br>差分密码分析： 在密码学中，差分密码分析是一种攻击技术，通过观察明文和密文的差异来推断密钥。<br>侧信道攻击： 利用加密过程中的侧信道信息，例如时钟频率、功耗等，来推断密钥或明文。<br>隐藏信息和隐写术：</p><p>隐写术： 隐写术涉及将信息隐藏在其他媒体中，例如图像、音频或文本文件。参赛者可能需要分析文件以找到隐藏的信息。<br>流密码和伪随机数生成器：</p><p>流密码： 在CTF中，可能会出现基于伪随机数生成器（PRNG）的流密码。参赛者可能需要分析PRNG的弱点或者找到PRNG的种子值。<br>协议分析：</p><p>安全协议： 分析和攻击安全协议，例如TLS&#x2F;SSL。这可能包括POODLE、Heartbleed等漏洞的利用。<br>常见CTF工具：</p><p>CrypTool： 一个密码学学习工具，用于分析和解密各种加密算法。<br>Wireshark： 用于分析网络流量，可能涉及到协议分析的场景。<br>John the Ripper、Hashcat： 用于密码破解的工具。<br>Binwalk： 用于分析二进制文件，可能涉及到隐写术的场景。<br>在CTF比赛中，密码学题目的目标通常是解密给定的密文、找到隐藏的信息、分析加密算法的弱点，或者攻击使用密码保护的系统。解决这些挑战需要参赛者具备密码学知识、分析技能以及创造性的思维。</p><p>Misc<br>CTF（Capture The Flag）比赛中的Miscellaneous（Misc）方向涵盖了各种与计算机安全相关的主题，但不属于具体的密码学、网络安全或二进制分析等明确定义的领域。Miscellaneous挑战通常涉及广泛的主题，包括隐写术、文件分析、编码和解码、网络流量分析、操作系统知识等等。以下是CTF Misc 方向的一些详细介绍：</p><p>隐写术（Steganography）：</p><p>图像隐写术： 隐写术涉及将信息隐藏在其他媒体中，如图像、音频或视频文件。CTF中的Miscellaneous挑战可能要求参与者分析图像以找到隐藏的信息。<br>音频和视频隐写术： 隐写术不仅限于图像，还可能涉及音频和视频文件的分析，寻找隐藏的信息。<br>文件分析：</p><p>文件格式分析： 参赛者可能需要分析给定文件的结构，寻找隐藏在其中的信息。这可能包括二进制文件、文本文件、PDF文件等。<br>元数据分析： 检查文件的元数据（例如创建日期、作者信息）以及其他可能包含隐藏信息的字段。<br>编码和解码（Encoding&#x2F;Decoding）：</p><p>Base64、Hex等编码： 参赛者可能需要解码使用Base64、Hex等编码的字符串，或者编码给定的明文。<br>URL编码： 分析URL编码的字符串，解码其中的特殊字符。<br>网络流量分析：</p><p>Wireshark挑战： 分析捕获的网络流量，找到隐藏的信息、识别协议或解决与网络通信相关的问题。<br>包分析： 分析特定协议的数据包，识别协议字段或找到隐藏的信息。<br>操作系统知识：</p><p>Linux命令行挑战： Misc方向可能包括一些需要使用Linux命令行技能的挑战，例如查找文件、分析日志等。<br>系统漏洞： 一些Miscellaneous挑战可能与操作系统漏洞有关，需要参赛者利用这些漏洞。<br>Web技能：</p><p>Web文件和目录结构： 分析网站的文件和目录结构，查找隐藏的信息或资源。<br>HTTP请求和响应： 分析HTTP请求和响应，识别可能包含信息的字段。<br>其他杂项挑战：</p><p>数学题目： 可能包括一些需要解决数学问题的挑战，例如解方程、找规律等。<br>谜题： 一些挑战可能是谜题，需要一些创造性的思考来解决。<br>总体而言，Miscellaneous方向涉及到多个计算机安全领域，需要参赛者具备广泛的技能和知识，同时培养一种创造性和灵活性的思维方式。 Misc挑战常常要求参赛者不仅能够深入理解特定领域的知识，还需要跨领域应用这些知识解决问题。</p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
